
##Code Review 
####Structure
I think the main problem with this code is the dependency train. If you had a weird format that had to be process in a 
special why you would run in to problems. I would image that there are a lot of audio and video formats.

Maybe a better approach would be duck-typing. Where you would have a processing class instance that you would pass in to 
each formatting class. This class would handle all the heavy lifting. This way you could make changes either the formatting 
class or the processing class without breaking everything as long as the interface was the same. you could even have
multiple processing classes. If you wanted to give discounts for example.

```
processing = Processing.new 
AudioFormating.new(processing).print_order
```
###Inheritance 
It's difficult to know where this code would fit in to a larger program. But I don't think that you would 
has separate classes for each bundle type. I would imagine these would change a lot or more would be added making change dificult
###Business Rules
The bundles look like that would be volatile is a production application. So I would expect that they would be stored in a database.
But for this code challenge I would store this information in constants for simplicity

###Batching
I don't know how many bundles will be processed at a time but you should consider using batching or a limit of some kind

####Questions
* Does this actually solve the stated problem?  
  The this program should take in some parameters for multiple different formats and out put the whole order
  I don't see where that happens.

* Is it readable? 

    No. This code seam needless complex
* Does it have good test coverage?

    No. I thing you would be endlessly chasing edge cases with this code
    
* Does it follow all ruby code guidelines, formatting and practices?

    No there are magic integers that should be constants
    Dependency problems
    The variable could have more descriptive names
    Commenting; I like to use https://yardoc.org/ formatting in the comment so you get nice tooltip in you IDE.
    Some code styling problems that could be automatically handles with rubocop
    there are method that should be made private in Format class
* Is it production ready code?

    No
